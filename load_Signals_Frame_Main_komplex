
import matplotlib.pyplot as plt
import numpy as np
from sklearn.linear_model import SGDClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.neural_network import MLPClassifier
from sklearn.ensemble import RandomForestClassifier
import torch

scaler = StandardScaler()

class Signal():
    def Load_Signal(self):
        Signal_1= np.load('C:\\Users\\dauserml\\Desktop\\dauserml_Messungen_2020_07_22\\wareable_2020_08_14\\Feld_1_1_rechte_Hand.npy');
        Signal_2= np.load('C:\\Users\\dauserml\\Desktop\\dauserml_Messungen_2020_07_22\\wareable_2020_08_14\\Feld_1_1_rechte_Hand.npy');
        Signal_3= np.load('C:\\Users\\dauserml\\Desktop\\dauserml_Messungen_2020_07_22\\wareable_2020_08_14\\Feld_1_1_rechte_Hand.npy');
        Signal_4= np.load('C:\\Users\\dauserml\\Desktop\\dauserml_Messungen_2020_07_22\\wareable_2020_08_14\\Feld_1_1_rechte_Hand.npy');
        Signal_5 =np.load('C:\\Users\\dauserml\\Desktop\\dauserml_Messungen_2020_07_22\\wareable_2020_08_14\\Feld_1_1_rechte_Hand.npy');
        Signal_6 =np.load('C:\\Users\\dauserml\\Desktop\\dauserml_Messungen_2020_07_22\\wareable_2020_08_14\\Feld_1_1_rechte_Hand.npy');
        Signal_7 = np.concatenate((Signal_1[0:3000,:,:],Signal_2[0:3000,:,:],Signal_3[0:3000,:,:],
                                  Signal_4[0:3000,:,:],Signal_5[0:3000,:,:],Signal_6[0:3000,:,:],Signal_1[0:3000,:,:],Signal_2[0:3000,:,:],Signal_3[0:3000,:,:],
                                  Signal_4[0:3000,:,:],Signal_5[0:3000,:,:],Signal_6[0:3000,:,:]))
        Signal.rolling

        Signal
        #test = np.load('C:\\Users\\dauserml\\Desktop\\dauserml_Messungen_2020_07_22\\coil\\Feld_2_coil_test_1_sequenz.npy');
        test =np.concatenate((Signal_1,Signal_2))
        #test = np.concatenate((Signal_1[:,:,:],Signal_2[:,:,:],Signal_3[:,:,:],
        #                          Signal_4[:,:,:],Signal_5[:,:,:],Signal_6[:,:,:]))
        #test = test[3500:4800,:,:]
        Signal_g = np.concatenate((Signal.convert_Signal(self=0,Signal_1=Signal_1),Signal.convert_Signal(self=0,Signal_1=Signal_2),Signal.convert_Signal(self=0,Signal_1=Signal_3),Signal.convert_Signal(self=0,Signal_1=Signal_4),Signal.convert_Signal(self=0,Signal_1=Signal_5),Signal.convert_Signal(self=0,Signal_1=Signal_6),Signal.convert_Signal(self=0,Signal_1=Signal_7)))
        X_test = Signal.X_Test(self=0,Signal=test)

        if (0 == 1):
            plt.subplots_adjust(wspace=0.5, hspace=0.5)
            fig = plt.figure(1)
            plt.subplot(4, 2, 1)
            plt.title("Antenne 11 R_1")
            plt.plot(Signal_1.imag[:, 1, 10]);
            plt.plot(Signal_1.real[:, 1, 10])
            plt.subplot(4, 2, 2)
            plt.title("Antenne 11 R_2")
            plt.plot(Signal_2.imag[:, 1, 10]);
            plt.plot(Signal_1.real[:, 1, 10])
            plt.subplot(4, 2, 3)
            plt.title("Antenne 11 R_3")
            plt.plot(Signal_3.imag[:, 1, 10]);
            plt.plot(Signal_1.real[:, 1, 10])
            plt.subplot(4, 2, 4)
            plt.title("Antenne 11 R_4")
            plt.plot(Signal_4.imag[:, 1, 10]);
            plt.plot(Signal_1.real[:, 1, 10])
            plt.subplot(4, 2, 5)
            plt.plot(Signal_1.imag[:, 1, 11]);
            plt.plot(Signal_1.real[:, 1, 11])
            plt.title("Antenne 12 R_1")
            plt.subplot(4, 2, 6)
            plt.plot(Signal_2.imag[:, 1, 11]);
            plt.plot(Signal_1.real[:, 1, 11])
            plt.title("Antenne 12 R_2")
            plt.subplot(4, 2, 7)
            plt.plot(Signal_3.imag[:, 1, 11]);
            plt.plot(Signal_1.real[:, 1, 11])
            plt.title("Antenne 12 R_3")
            plt.subplot(4, 2, 8)
            plt.plot(Signal_4.imag[:, 1, 11]);
            plt.plot(Signal_1.real[:, 1, 11])
            plt.title("Antenne 12 R_4")
            plt.show()

        #test = np.concatenate((Signal_1[0:20000,:,:],Signal_6[0:20000,:,:]))
        #test = Signal_5
        return Signal_g,X_test,test


    def convert_Signal(self,Signal_1):
        XX=[]
        for i in range(0, 30000): #Signal_1.shape[0]):
            X = []
            for j in range(0,Signal_1.shape[2]-2):
                X.append(Signal_1.real[i, 1, j])
                X.append(Signal_1.imag[i, 1, j])

            XX.append(X)
        return XX

    def X_Test(self,Signal):
        XX = []
        for i in range(0, len(Signal)):  # Signal_1.shape[0]):
            X = []
            for j in range(0, Signal.shape[2] - 2):
                X.append(Signal.real[i, 1, j])
                X.append(Signal.imag[i, 1, j])
            XX.append(X)
        return XX

X,X_Test,X_Test_1 = Signal.Load_Signal(self=0)

a=[]
b=[]
c=[]
d=[]
e=[]
f=[]
g=[]
for i in range(30000):
    a.append(1)
    b.append(2)
    c.append(3)
    d.append(4)
    e.append(5)
    f.append(6)
    g.append(7)

Y= np.concatenate((a,b,c,d,e,f,g))

#clf = RandomForestClassifier(n_estimators=2,min_samples_split=3,min_samples_leaf=2)
clf = MLPClassifier(solver='lbfgs', alpha=1e-5,hidden_layer_sizes=(240,240,240), random_state=0, max_iter=8000)

#Inputs = scaler.fit_transform(X)
#Outputs = scaler.fit_transform(Y)

#clf.fit(X,Y)
#torch.save(clf, "C:\\Users\\dauserml\\Desktop\\dauserml_Messungen_2020_07_22\\save_Model\\test_clf_4")
clf=torch.load("C:\\Users\\dauserml\\Desktop\\dauserml_Messungen_2020_07_22\\save_Model\\test_clf_4_Hidden_240_240_240_nicht_so_gut")

#plt.plot(X_Test)
#plt.show()
er = clf.predict(X_Test)

#Y_Neuronal_2 = scaler.inverse_transform(er)
#Outputs_1 = scaler.inverse_transform(Outputs)

print(er)
print('1->',np.count_nonzero(er==1),'2->',np.count_nonzero(er==2),'3->',np.count_nonzero(er==3),'4->',np.count_nonzero(er==4),'5->',np.count_nonzero(er==5),'6->',np.count_nonzero(er==6),'7_gleich_0->',np.count_nonzero(er==7),)

Signal = X_Test_1
fig = plt.figure(1)
plt.subplot(4,2,1)
plt.plot(Signal.imag[:,1,0]);plt.plot(Signal.real[:,1,0])
plt.subplot(4,2,2)
plt.plot(Signal.imag[:,1,1]);plt.plot(Signal.real[:,1,1])
plt.subplot(4,2,3)
plt.plot(Signal.imag[:,1,2]);plt.plot(Signal.real[:,1,2])
plt.subplot(4,2,4)
plt.plot(Signal.imag[:,1,3]);plt.plot(Signal.real[:,1,3])
plt.subplot(4,2,5)
plt.plot(Signal.imag[:,1,4]);plt.plot(Signal.real[:,1,4])
plt.subplot(4,2,6)
plt.plot(Signal.imag[:,1,5]);plt.plot(Signal.real[:,1,5])
plt.subplot(4,2,7)
plt.plot(Signal.imag[:,1,6]);plt.plot(Signal.real[:,1,6])
plt.subplot(4,2,8)
plt.plot(Signal.imag[:,1,7]);plt.plot(Signal.real[:,1,7])
plt.suptitle('Antennen 1 - 8')

plt.figure(2)
plt.subplot(4,2,1)
plt.plot(Signal.imag[:,1,8]);plt.plot(Signal.real[:,1,8])
plt.subplot(4,2,2)
plt.plot(Signal.imag[:,1,9]);plt.plot(Signal.real[:,1,9])
plt.subplot(4,2,3)
plt.plot(Signal.imag[:,1,10]);plt.plot(Signal.real[:,1,10])
plt.subplot(4,2,4)
plt.plot(Signal.imag[:,1,11]);plt.plot(Signal.real[:,1,11])
plt.subplot(4,2,5)
plt.plot(Signal.imag[:,1,12]);plt.plot(Signal.real[:,1,12])
plt.subplot(4,2,6)
plt.plot(Signal.imag[:,1,13]);plt.plot(Signal.real[:,1,13])
plt.subplot(4,2,7)
plt.plot(Signal.imag[:,1,14]);plt.plot(Signal.real[:,1,14])
plt.subplot(4,2,8)
plt.plot(Signal.imag[:,1,15]);plt.plot(Signal.real[:,1,15])
plt.suptitle('Antennen 9 -16')

#plt.figure(3)
#plt.subplot(2,1,1)
#plt.plot(Signal.imag[:,1,16]);plt.plot(Signal.real[:,1,16])
#plt.subplot(2,1,2)
#plt.plot(Signal.imag[:,1,17]);plt.plot(Signal.real[:,1,17])
#plt.suptitle('Strom Feedback')
plt.show()